# Archives

@login_required
def leads_list(request):
    leads = Lead.objects.filter(created_by=request.user, converted_to_client=False) # converted_to_client = False : Pour faire de sorte qu'une fois converti en client le prospect doit disparaitre de cette liste

    context = {
        'leads':leads
    }
    return render(request, "lead/leads_list.html", context)

@login_required
def leads_detail(request, pk):
    lead = get_object_or_404(Lead, created_by=request.user, pk=pk)
    #lead = Lead.objects.filter(created_by=request.user).get(pk=pk)

    context = {
        "lead": lead,
    }
    return render(request, "lead/leads_detail.html", context)

@login_required
def leads_delete(request, pk):
    lead = get_object_or_404(Lead, created_by=request.user, pk=pk)
    lead.delete()

    messages.success(request, 'Le prospect a été supprimé avec succès!')

    return redirect('leads:list')

@login_required
def leads_edit(request, pk):
    lead = get_object_or_404(Lead, created_by=request.user, pk=pk)

    if request.method == 'POST':
        form = AddLeadForm(request.POST, instance=lead)
        if form.is_valid():
            form.save()

            messages.success(request, 'Le prospect a été modifié avec succès!')

            return redirect('leads:list')
    else:
        form = AddLeadForm(instance=lead)

        context = {
            "form" : form,

        }
    return render(request, "lead/leads_edit.html", context)

@login_required
def leads_add(request):
    team = Team.objects.filter(created_by=request.user)[0]

    if request.method == 'POST':
        form = AddLeadForm(request.POST)

        if form.is_valid():
            lead = form.save(commit=False)
            lead.created_by = request.user
            # Make sure that team is set when creating lead
            lead.team = team
            lead.save()

            messages.success(request, 'Le prospect a été créé avec succès!')

            return redirect('leads:list')
    else:
        form = AddLeadForm()

        context = {
            'form': form,
            'team': team,
        }
    return render(request, "lead/add_lead.html", context)


@login_required
def convert_to_client(request, pk):
    lead = get_object_or_404(Lead, created_by=request.user, pk=pk)
    team = Team.objects.filter(created_by=request.user)[0]

    client = Client.objects.create(
        name=lead.name,
        email=lead.email,
        description=lead.description,
        created_by=request.user,
        # Make sure that team is set when converting lead to client
        team=team,
    )

    lead.converted_to_client = True
    lead.save()

    messages.success(request, 'Le prospect a été converti en client avec succès!')

    return redirect('leads:list')
